# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AcceptInviteInput {
  token: String!
}

"""Auth response"""
type AuthResponse {
  accessToken: String!
  refreshToken: String!
  refreshTokenId: String!
}

input CancelInviteInput {
  id: ID!
}

input CreateOrganizationInput {
  metadata: JSON
  name: String!
}

input CreateProjectInput {
  metadata: JSON
  name: String!
  organizationId: String!
}

"""Date custom scalar type"""
scalar Date

input DeleteMemberInput {
  organizationId: String!
  userId: String!
}

input DeleteOrganizationInput {
  id: ID!
}

input DeleteProjectInput {
  id: ID!
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

input ForgotPasswordInput {
  email: String!
}

"""Forgot password response"""
type ForgotPasswordResponse {
  success: Boolean!
}

input GetMemberInput {
  organizationId: String!
  userId: String!
}

"""Invite"""
type Invite {
  createdAt: Date!
  createdBy: ServiceRole!
  deletedAt: Date
  deletedBy: ServiceRole
  email: String!
  expiresAt: Date!
  id: ID!
  organization: Organization!
  organizationId: String!
  role: MemberRole!
  status: InviteStatus!
  token: String!
  updatedAt: Date!
  updatedBy: ServiceRole!
}

enum InviteStatus {
  ACCEPTED
  CANCELLED
  DECLINED
  EXPIRED
  PENDING
}

"""Invites"""
type InvitesResponse {
  items: [Invite!]
  meta: PageMeta
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Member"""
type Member {
  createdAt: Date!
  createdBy: ServiceRole!
  deletedAt: Date
  deletedBy: ServiceRole
  id: ID!
  organization: Organization!
  organizationId: String!
  role: MemberRole!
  updatedAt: Date!
  updatedBy: ServiceRole!
  user: User!
  userId: String!
}

enum MemberRole {
  ADMINISTRATOR
  DEVELOPER
  OWNER
}

"""Members"""
type MembersResponse {
  items: [Member!]
  meta: PageMeta
}

type Mutation {
  forgotPassword(input: ForgotPasswordInput!): ForgotPasswordResponse!
  inviteAccept(input: AcceptInviteInput!): Invite!
  inviteCancel(input: CancelInviteInput!): Invite!
  inviteResend(input: ResendInviteInput!): Invite!
  inviteSend(input: SendInviteInput!): Invite!
  memberDelete(input: DeleteMemberInput!): Member!
  memberUpdate(input: UpdateMemberInput!): Member!
  organizationCreate(input: CreateOrganizationInput!): Organization!
  organizationDelete(input: DeleteOrganizationInput!): Organization!
  organizationUpdate(input: UpdateOrganizationInput!): Organization!
  projectCreate(input: CreateProjectInput!): Project!
  projectDelete(input: DeleteProjectInput!): Project!
  projectTransfer(input: TransferProjectInput!): Project!
  projectUpdate(input: UpdateProjectInput!): Project!
  refreshToken: AuthResponse!
  resetPassword(input: ResetPasswordInput!): AuthResponse!
  signIn(input: SignInInput!): AuthResponse!
  signOut: SignOutResponse!
  signUp(input: SignUpInput!): AuthResponse!
  updatePassword(input: UpdatePasswordInput!): User!
}

"""Organization"""
type Organization {
  createdAt: Date!
  createdBy: ServiceRole!
  deletedAt: Date
  deletedBy: ServiceRole
  id: ID!
  metadata: JSON
  name: String!
  slug: String!
  updatedAt: Date!
  updatedBy: ServiceRole!
}

"""Organizations"""
type OrganizationsResponse {
  items: [Organization!]
  meta: PageMeta
}

type PageMeta {
  count: Int!
  skip: Int!
  take: Int!
}

"""Project"""
type Project {
  createdAt: Date!
  createdBy: ServiceRole!
  deletedAt: Date
  deletedBy: ServiceRole
  id: ID!
  name: String!
  organization: Organization!
  organizationId: String!
  status: ProjectStatus!
  updatedAt: Date!
  updatedBy: ServiceRole!
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
}

"""Projects"""
type ProjectsResponse {
  items: [Project!]
  meta: PageMeta
}

type Query {
  invite(id: String!): Invite
  invites(organizationId: ID!, skip: Int! = 0, take: Int! = 10): InvitesResponse!
  me: User!
  member(input: GetMemberInput!): Member
  members(organizationId: ID!, skip: Int! = 0, take: Int! = 10): MembersResponse!
  organization(id: String!): Organization
  organizations(skip: Int! = 0, take: Int! = 10): OrganizationsResponse!
  project(id: String!): Project
  projects(organizationId: ID!, skip: Int! = 0, take: Int! = 10): ProjectsResponse!
}

input ResendInviteInput {
  id: ID!
}

input ResetPasswordInput {
  confirmPassword: String!
  newPassword: String!
  token: String!
  userId: String!
}

input SendInviteInput {
  email: EmailAddress!
  metadata: JSON
  organizationId: String!
  role: MemberRole!
}

"""Service role"""
type ServiceRole {
  service: String
  serviceDescription: String
  userId: ID
}

input SignInInput {
  password: String!
  username: String!
}

"""Sign out response"""
type SignOutResponse {
  success: Boolean!
}

input SignUpInput {
  email: String!
  password: String!
  username: String!
}

input TransferProjectInput {
  id: ID!
  newOrganizationId: String!
}

input UpdateMemberInput {
  organizationId: String!
  role: MemberRole
  userId: String!
}

input UpdateOrganizationInput {
  id: ID!
  metadata: JSON
  name: String
}

input UpdatePasswordInput {
  confirmPassword: String!
  currentPassword: String!
  newPassword: String!
}

input UpdateProjectInput {
  id: ID!
  metadata: JSON
  name: String
  status: ProjectStatus
}

"""User"""
type User {
  createdAt: Date!
  createdBy: ServiceRole!
  deletedAt: Date
  deletedBy: ServiceRole
  email: String!
  firstName: String
  id: ID!
  lastName: String
  updatedAt: Date!
  updatedBy: ServiceRole!
  username: String!
}