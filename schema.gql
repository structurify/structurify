# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateOrganizationInput {
  metadata: JSON
  name: String!
}

input CreateProjectInput {
  metadata: JSON
  name: String!
  organizationId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteOrganizationInput {
  id: ID!
}

input DeleteProjectInput {
  id: ID!
}

"""Invite"""
type Invite {
  createdAt: DateTime!
  createdBy: ServiceRole!
  deletedAt: DateTime
  deletedBy: ServiceRole
  email: String!
  expiresAt: DateTime!
  id: ID!
  organizationId: String!
  role: MemberRole!
  status: InviteStatus!
  token: String!
  updatedAt: DateTime!
  updatedBy: ServiceRole!
}

enum InviteStatus {
  ACCEPTED
  DECLINED
  EXPIRED
  SENT
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""Member"""
type Member {
  createdAt: DateTime!
  createdBy: ServiceRole!
  deletedAt: DateTime
  deletedBy: ServiceRole
  id: ID!
  organizationId: String!
  role: MemberRole!
  updatedAt: DateTime!
  updatedBy: ServiceRole!
  userId: String!
}

enum MemberRole {
  ADMINISTRATOR
  DEVELOPER
  OWNER
}

type Mutation {
  organizationCreate(input: CreateOrganizationInput!): Organization!
  organizationDelete(input: DeleteOrganizationInput!): Organization!
  organizationUpdate(input: UpdateOrganizationInput!): Organization!
  projectCreate(input: CreateProjectInput!): Project!
  projectDelete(input: DeleteProjectInput!): Project!
  projectTranser(input: TransferProjectInput!): Project!
  projectUpdate(input: UpdateProjectInput!): Project!
  signIn(input: SignInInput!): SignInResponse!
  signUp(input: SignUpInput!): SignUpResponse!
}

"""Organization"""
type Organization {
  createdAt: DateTime!
  createdBy: ServiceRole!
  deletedAt: DateTime
  deletedBy: ServiceRole
  id: ID!
  metadata: JSON
  name: String!
  slug: String!
  updatedAt: DateTime!
  updatedBy: ServiceRole!
}

"""Organizations"""
type OrganizationsResponse {
  items: [Organization!]
  meta: PageMeta
}

type PageMeta {
  count: Int!
  skip: Int!
  take: Int!
}

"""Project"""
type Project {
  createdAt: DateTime!
  createdBy: ServiceRole!
  deletedAt: DateTime
  deletedBy: ServiceRole
  id: ID!
  name: String!
  organization: Organization!
  organizationId: String!
  status: ProjectStatus!
  updatedAt: DateTime!
  updatedBy: ServiceRole!
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
}

"""Projects"""
type ProjectsResponse {
  items: [Project!]
  meta: PageMeta
}

type Query {
  organization(id: String!): Organization!
  organizations(skip: Int! = 0, take: Int! = 10): OrganizationsResponse!
  project(id: String!): Project!
  projects(organizationId: ID!, skip: Int! = 0, take: Int! = 10): ProjectsResponse!
}

"""Service role"""
type ServiceRole {
  service: String
  serviceDescription: String
  userId: ID
}

input SignInInput {
  password: String!
  username: String!
}

"""Sign in response"""
type SignInResponse {
  accessToken: String!
}

input SignUpInput {
  email: String!
  password: String!
  username: String!
}

"""Sign up response"""
type SignUpResponse {
  accessToken: String!
}

input TransferProjectInput {
  id: ID!
  newOrganizationId: String!
}

input UpdateOrganizationInput {
  id: ID!
  metadata: JSON
  name: String
}

input UpdateProjectInput {
  id: ID!
  metadata: JSON
  name: String
  status: ProjectStatus
}